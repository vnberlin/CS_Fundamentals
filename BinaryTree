#include <iostream>
#include <queue>
using namespace std;

struct Node{
    int data;
    Node* left;
    Node* right;
};

Node* insert_node(Node* root, int data);
Node* get_new_node(int data);
bool search(Node* root, int data);
void pre_order(Node* root);
void in_order(Node* root);
void post_order(Node* root);
void level_order(Node* root);

int main()
{
    int target;
    Node* root;
    root = NULL;
    root = insert_node(root, 15);
    root = insert_node(root, 10);
    root = insert_node(root, 20);
    root = insert_node(root, 25);
    root = insert_node(root, 8);
    root = insert_node(root, 12);
    root = insert_node(root, 19);
    
    cout << "Enter Search Target : ";
    cin >> target;
    if(search(root, target) == true)
        cout << "FOUND TARGET" << endl;
    else
        cout << "TARGET NOT FOUND" << endl;
        
    cout << "\nPRE-ORDER DFS" << endl;
    pre_order(root);
    cout << endl;
    
    cout << "\nIN-ORDER DFS" << endl;
    in_order(root);
    cout << endl;
    
    cout << "\nPOST-ORDER DFS" << endl;
    post_order(root);
    cout << endl;
    
    cout << "\nLEVEL-ORDER BFS" << endl;
    level_order(root);
    cout << endl;
   
   
   return 0;
}

Node* get_new_node(int data){
    Node* new_node = new Node();
    new_node->data = data;
    new_node->left = NULL;
    new_node->right = NULL;
    return new_node;
}

Node* insert_node(Node* root, int data){
    
    if(root == NULL){
        root = get_new_node(data);
    }
    else if(data <= root->data){
        root->left = insert_node(root->left, data);
    }
    else{
        root->right = insert_node(root->right, data);
    }
    
    return root;
}

bool search(Node* root, int data){
    if(root == NULL)
        return false;
    else if(root->data == data)
        return true;
    else if(data <= root->data)
        return search(root->left, data);
    else
        return search(root->right, data);
}

void pre_order(Node* root){
    if(root == NULL){
        return;
    }
    cout << root->data << ",";
    pre_order(root->left);
    pre_order(root->right);
}

void in_order(Node* root){
    if(root == NULL){
        return;
    }
    in_order(root->left);
    cout << root->data << ",";
    in_order(root->right);
}

void post_order(Node* root){
    if(root == NULL){
        return;
    }
    post_order(root->left);
    post_order(root->right);
    cout << root->data << ",";
}

void level_order(Node* root){
    if(root == NULL) return;
    queue<Node*> Q;
    Q.push(root);
    
    while(!Q.empty()){
        Node* current = Q.front();
        cout << current->data << ",";
        
        if(current->left != NULL) Q.push(current->left);
        if(current->right != NULL) Q.push(current->right);
        
        Q.pop();
    }
}
